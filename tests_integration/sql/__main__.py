import random
from functools import cache

import duckdb
import polars as pl

import chrysalis as chry
from tests_integration.sql import invariants, transformations

# Mock player data generated by `faker`.
_MOCK_PLAYER_DATA = [
    {
        "name": "Scott Johnson",
        "position": "Quarterback",
        "college": "Ohio State University",
        "team": "Panthers",
        "round": 3,
        "draft": 16,
    },
    {
        "name": "Devin Bradshaw",
        "position": "Corner",
        "college": "University of Notre Dame",
        "team": "Giants",
        "round": 2,
        "draft": 9,
    },
    {
        "name": "Alyssa Jones",
        "position": "Safety",
        "college": "University of Notre Dame",
        "team": "Buccaneers",
        "round": 7,
        "draft": 28,
    },
    {
        "name": "Steven Wilson",
        "position": "Tight End",
        "college": "Ohio State University",
        "team": "Bears",
        "round": 3,
        "draft": 3,
    },
    {
        "name": "Darlene Lester",
        "position": "Linebacker",
        "college": "University of Florida",
        "team": "Commanders",
        "round": 5,
        "draft": 20,
    },
    {
        "name": "Megan Duffy",
        "position": "Offensive Line",
        "college": "Virginia Tech",
        "team": "Panthers",
        "round": 1,
        "draft": 30,
    },
    {
        "name": "Leah Anderson",
        "position": "Wide Receiver",
        "college": "University of Arizona",
        "team": "Jets",
        "round": 6,
        "draft": 10,
    },
    {
        "name": "John Boyd",
        "position": "Running Back",
        "college": "University of Arizona",
        "team": "Chiefs",
        "round": 6,
        "draft": 5,
    },
    {
        "name": "Michael Riley",
        "position": "Right Guard",
        "college": "Florida State University",
        "team": "Cardinals",
        "round": 1,
        "draft": 3,
    },
    {
        "name": "Michael Bishop",
        "position": "Nose Tackle",
        "college": "Virginia Tech",
        "team": "Jaguars",
        "round": 4,
        "draft": 8,
    },
]


@cache
def _test_connection() -> duckdb.DuckDBPyConnection:
    conn = duckdb.connect()
    df = pl.DataFrame(_MOCK_PLAYER_DATA)
    conn.register("player_stats", df)
    return conn


def evaluate_query(query: str) -> pl.DataFrame:
    conn = _test_connection()
    return conn.query(query).pl()


_INPUT_QUERY = "SELECT name, position, college, team, round, draft FROM player_stats;"


def _assert_num_rows(
    table: str,
    num_rows: int,
    conn: duckdb.DuckDBPyConnection,
) -> None:
    result = conn.query(f"SELECT COUNT(*) FROM {table};").fetchone()
    assert result is not None and len(result) == 1

    count = result[0]
    assert count == num_rows


def register_relations() -> None:
    chry.register(transformations.add_college_column, invariants.length_equals)
    chry.register(transformations.add_team_column, invariants.length_equals)
    chry.register(transformations.add_round_column, invariants.length_equals)
    chry.register(transformations.add_draft_column, invariants.length_equals)
    chry.register(transformations.remove_college_column, invariants.length_equals)
    chry.register(transformations.remove_team_column, invariants.length_equals)
    chry.register(transformations.remove_round_column, invariants.length_equals)
    chry.register(transformations.remove_draft_column, invariants.length_equals)

    chry.register(transformations.add_order_by_asc, invariants.length_equals)
    chry.register(transformations.add_order_by_desc, invariants.length_equals)
    chry.register(transformations.remove_order_by, invariants.length_equals)

    # Intentional bug, it is possible that adding `LIMIT 8` will remove `LIMIT 4` and
    # cause the invariant to fail.
    chry.register(transformations.add_limit_8, invariants.length_less_than_equals)
    chry.register(transformations.add_limit_4, invariants.length_less_than_equals)
    chry.register(transformations.remove_limit, invariants.length_greater_than_equals)


if __name__ == "__main__":
    random.seed(0)
    register_relations()
    conn = chry.run(
        sut=evaluate_query,
        input_data=[_INPUT_QUERY],
        chain_length=100,
        num_chains=10,
    )

    _assert_num_rows("transformation", 14, conn)
    _assert_num_rows("invariant", 3, conn)
    _assert_num_rows("relation", 14, conn)
    _assert_num_rows("input_data ", 1, conn)
    _assert_num_rows("applied_transformation", 1000, conn)

    result = conn.query(
        """
SELECT id
FROM transformation
WHERE name = 'add_limit_8';
    """
    ).fetchone()

    assert result is not None and len(result) == 1

    limit_8_id = result[0]

    transformation_ids = conn.query(
        """
SELECT
    atr.transformation
FROM
    failed_invariant fi
INNER JOIN
    applied_transformation atr
ON
    atr.id = fi.applied_transformation;
"""
    ).fetchall()

    # Given the seed, we know that there should be at least 1 failed invariant.
    assert len(transformation_ids) > 0
    assert all((transform_id == limit_8_id for (transform_id,) in transformation_ids))
